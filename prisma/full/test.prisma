generator client {
  provider = "prisma-client-js"
  output   = "../libs/test"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE2_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model blog {
  id          String   @id
  title       String
  content     String
  decoration  String
  imageFormat String
  image       String   @unique(map: "Blog_image_key")
  createdAt   DateTime @default(now())
  authorId    String
  user        user     @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Blog_authorId_fkey")

  @@index([authorId], map: "Blog_authorId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  password      String?
  account       account[]
  blog          blog[]
  session       session[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
